"""
AI Voice Assistant for SleepMitra
This module provides voice-to-text and AI-powered responses in Hindi
"""

import streamlit as st
import openai
import speech_recognition as sr
import pyttsx3
from datetime import datetime
import os

class SleepMitraVoiceAssistant:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        self.tts_engine = pyttsx3.init()
        self.setup_tts()
    
    def setup_tts(self):
        """Setup text-to-speech engine for Hindi"""
        voices = self.tts_engine.getProperty('voices')
        # Try to find Hindi voice
        for voice in voices:
            if 'hindi' in voice.name.lower() or 'indian' in voice.name.lower():
                self.tts_engine.setProperty('voice', voice.id)
                break
        
        # Set speech rate and volume
        self.tts_engine.setProperty('rate', 150)  # Speed of speech
        self.tts_engine.setProperty('volume', 0.8)  # Volume level
    
    def listen_to_voice(self):
        """Listen to user's voice and convert to text"""
        try:
            with self.microphone as source:
                st.info("üé§ ‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç... ‡§¨‡•ã‡§≤‡§ø‡§è")
                self.recognizer.adjust_for_ambient_noise(source)
                audio = self.recognizer.listen(source, timeout=5)
            
            # Convert speech to text
            text = self.recognizer.recognize_google(audio, language='hi-IN')
            return text
        except sr.WaitTimeoutError:
            return "‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ - ‡§ï‡•ã‡§à ‡§Ü‡§µ‡§æ‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡•Ä ‡§ó‡§à"
        except sr.UnknownValueError:
            return "‡§Ü‡§µ‡§æ‡§ú ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§à - ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§¨‡•ã‡§≤‡•á‡§Ç"
        except Exception as e:
            return f"‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}"
    
    def get_ai_response(self, user_question):
        """Get AI response using OpenAI API"""
        try:
            # Set up OpenAI API
            openai.api_key = st.secrets.get("OPENAI_API_KEY", os.getenv("OPENAI_API_KEY"))
            
            if not openai.api_key:
                return "OpenAI API key ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ API key ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§"
            
            # Create prompt for sleep-related questions in Hindi
            prompt = f"""
            ‡§Ü‡§™ SleepMitra ‡§ï‡•á AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à‡§Ç‡•§ ‡§®‡•Ä‡§Ç‡§¶ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç‡•§
            
            ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§∏‡§µ‡§æ‡§≤: {user_question}
            
            ‡§ï‡•É‡§™‡§Ø‡§æ:
            1. ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç
            2. ‡§®‡•Ä‡§Ç‡§¶ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§ï‡•á ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§Ç
            3. ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç
            4. ‡§Ø‡§¶‡§ø ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§®‡•á ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§Ç
            5. 2-3 ‡§µ‡§æ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç
            """
            
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "‡§Ü‡§™ SleepMitra ‡§ï‡•á AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à‡§Ç‡•§ ‡§®‡•Ä‡§Ç‡§¶ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç‡•§"},
                    {"role": "user", "content": user_question}
                ],
                max_tokens=200,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"AI ‡§∏‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡§æ: {str(e)}"
    
    def speak_response(self, text):
        """Convert text to speech"""
        try:
            self.tts_engine.say(text)
            self.tts_engine.runAndWait()
        except Exception as e:
            st.error(f"‡§Ü‡§µ‡§æ‡§ú ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡§æ ‡§∏‡§ï‡§æ: {str(e)}")
    
    def process_voice_query(self):
        """Complete voice processing pipeline"""
        # Step 1: Listen to voice
        user_text = self.listen_to_voice()
        
        if "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø" in user_text or "‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§" in user_text:
            return user_text, ""
        
        # Step 2: Get AI response
        ai_response = self.get_ai_response(user_text)
        
        # Step 3: Speak response
        self.speak_response(ai_response)
        
        return user_text, ai_response

# Streamlit integration functions
def setup_voice_assistant():
    """Setup voice assistant in Streamlit"""
    if 'voice_assistant' not in st.session_state:
        st.session_state.voice_assistant = SleepMitraVoiceAssistant()
    return st.session_state.voice_assistant

def voice_chat_interface():
    """Voice chat interface for Streamlit"""
    assistant = setup_voice_assistant()
    
    st.subheader("üé§ ‡§µ‡•â‡§á‡§∏ ‡§ö‡•à‡§ü")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.markdown("""
        <div style="padding: 1rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 10px; margin: 1rem 0;">
            <h4 style="color: white; margin: 0 0 1rem 0;">üé§ ‡§µ‡•â‡§á‡§∏ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü</h4>
            <p style="margin: 0 0 0.5rem 0;">‚Ä¢ "‡§π‡•á‡§≤‡•ã, ‡§Æ‡•Å‡§ù‡•á ‡§®‡•Ä‡§Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§Ü ‡§∞‡§π‡•Ä"</p>
            <p style="margin: 0 0 0.5rem 0;">‚Ä¢ "CBT-I ‡§•‡•á‡§∞‡•á‡§™‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"</p>
            <p style="margin: 0 0 0.5rem 0;">‚Ä¢ "‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§ï‡§¨ ‡§Æ‡§ø‡§≤‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?"</p>
            <p style="margin: 0;">‚Ä¢ "‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•à‡§∏‡•á ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç?"</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        if st.button("üé§ ‡§µ‡•â‡§á‡§∏ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç", use_container_width=True, key="voice_record_ai"):
            with st.spinner("üé§ ‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç..."):
                user_question, ai_response = assistant.process_voice_query()
            
            if user_question and ai_response:
                # Display conversation
                st.markdown("### üí¨ ‡§µ‡•â‡§á‡§∏ ‡§ö‡•à‡§ü")
                
                # User question
                st.markdown(f"""
                <div style="background: #e3f2fd; padding: 1rem; border-radius: 10px; margin: 0.5rem 0;">
                    <strong>üë§ ‡§Ü‡§™:</strong> {user_question}
                </div>
                """, unsafe_allow_html=True)
                
                # AI response
                st.markdown(f"""
                <div style="background: #e8f5e8; padding: 1rem; border-radius: 10px; margin: 0.5rem 0;">
                    <strong>ü§ñ AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü:</strong> {ai_response}
                </div>
                """, unsafe_allow_html=True)
                
                # Save to chat history
                if 'voice_chat_history' not in st.session_state:
                    st.session_state.voice_chat_history = []
                
                st.session_state.voice_chat_history.append({
                    'timestamp': datetime.now().strftime("%H:%M:%S"),
                    'user': user_question,
                    'ai': ai_response
                })
    
    # Display voice chat history
    if 'voice_chat_history' in st.session_state and st.session_state.voice_chat_history:
        st.markdown("### üìù ‡§µ‡•â‡§á‡§∏ ‡§ö‡•à‡§ü ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä")
        
        for chat in reversed(st.session_state.voice_chat_history[-5:]):  # Show last 5
            st.markdown(f"""
            <div style="background: #f8f9fa; padding: 1rem; border-radius: 10px; margin: 0.5rem 0; border-left: 4px solid #6C5CE7;">
                <small style="color: #666;">{chat['timestamp']}</small>
                <p><strong>üë§ ‡§Ü‡§™:</strong> {chat['user']}</p>
                <p><strong>ü§ñ AI:</strong> {chat['ai']}</p>
            </div>
            """, unsafe_allow_html=True)

# Configuration instructions
def show_ai_setup_instructions():
    """Show instructions for setting up AI voice assistant"""
    st.markdown("---")
    st.subheader("üîß AI ‡§µ‡•â‡§á‡§∏ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§∏‡•á‡§ü‡§Ö‡§™")
    
    with st.expander("AI ‡§µ‡•â‡§á‡§∏ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•à‡§∏‡•á ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç?", expanded=False):
        st.markdown("""
        ### üìã ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∏‡•á‡§ü‡§Ö‡§™:
        
        **1. Python ‡§™‡•à‡§ï‡•á‡§ú ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç:**
        ```bash
        pip install openai speechrecognition pyttsx3 pyaudio
        ```
        
        **2. OpenAI API Key ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç:**
        - [OpenAI](https://platform.openai.com/api-keys) ‡§∏‡•á API key ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
        - Streamlit secrets ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç:
        ```toml
        # .streamlit/secrets.toml
        OPENAI_API_KEY = "your-api-key-here"
        ```
        
        **3. ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø:**
        - ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§® ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§¶‡•á‡§Ç
        - HTTPS ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï
        
        **4. ‡§π‡§ø‡§Ç‡§¶‡•Ä TTS ‡§µ‡•â‡§á‡§∏:**
        - Windows: Hindi voice pack ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
        - macOS: System Preferences ‡§Æ‡•á‡§Ç Hindi voice ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        - Linux: espeak ‡§Ø‡§æ festival ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
        """)
        
        st.code("""
        # Example usage in your Streamlit app:
        from ai_voice_assistant import voice_chat_interface
        
        # In your chatbot page:
        voice_chat_interface()
        """, language="python")

if __name__ == "__main__":
    # Test the voice assistant
    st.title("üé§ SleepMitra Voice Assistant Test")
    voice_chat_interface()
    show_ai_setup_instructions()
